# -*- coding: utf-8 -*-
"""Stock portflio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xiIB9QVY9bFwpiZdKwAc7QBDMD-eLY8W
"""

# Define a list to store the user's stock portfolio
portfolio = []

# Prompt the user to enter their stock holdings
while True:
    stock = input("Enter a stock symbol or type 'done' to finish: ").upper()
    if stock == "DONE":
        break
    else:
        shares = int(input("Enter the number of shares you own: "))
        portfolio.append({"symbol": stock, "shares": shares})

# Display the user's stock holdings
print("Your stock holdings:")
for stock in portfolio:
    print(f"{stock['symbol']}: {stock['shares']} shares")



print(portfolio)

!pip install yfinance

# now get the price of each stock in portfolio 1 year ago
# Import the necessary libraries

import yfinance as yf
from datetime import datetime, timedelta
# Define a function to get the price of a stock 1 year ago
def get_price_one_year_ago(symbol):
    # Define the start and end dates for the query
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - timedelta(days=365)).strftime('%Y-%m-%d')
    
    # Query YahooFinance for the stock price data
    stock_data = yf.download(symbol, start=start_date, end=end_date)
    
    # Return the closing price from 1 year ago
    return stock_data.iloc[0]['Close']

# Calculate the total value of the user's portfolio 1 year ago
total_value_one_year_ago = 0
for stock in portfolio:
    symbol = stock['symbol']
    shares = stock['shares']
    price_one_year_ago = get_price_one_year_ago(symbol)
    value_one_year_ago = shares * price_one_year_ago
    total_value_one_year_ago += value_one_year_ago  

# Print the total value of the user's portfolio 1 year ago
print(f'The total value of the user\'s portfolio 1 year ago was: ${total_value_one_year_ago:.2f}')

# calculate current market value of portfolio # Define the start and end dates for the query
end_date = datetime.today().strftime('%Y-%m-%d')
start_date = (datetime.today() - timedelta(days=365)).strftime('%Y-%m-%d')

# Define a function to get the current price of a stock
def get_current_price(symbol):
    # Query YahooFinance for the stock price data
    stock_data = yf.download(symbol, start=start_date, end=end_date)
    
    # Return the current closing price
    return stock_data.iloc[-1]['Close']

# Calculate the total current value of the user's portfolio
total_current_value = 0
for stock in portfolio:
    symbol = stock['symbol']
    shares = stock['shares']
    current_price = get_current_price(symbol)
    current_value = shares * current_price
    total_current_value += current_value

# Print the total current value of the user's portfolio
print(f'The total current value of the user\'s portfolio is: ${total_current_value:.2f}')

# Print the total value of the user's portfolio one year ago
print(f'The total value of the user\'s portfolio one year ago was: ${total_value_one_year_ago:.2f}')

# Calculate the total gain/loss of the user's portfolio
total_gain_loss = total_current_value - total_value_one_year_ago
print(f'The total gain/loss of the user\'s portfolio is: ${total_gain_loss:.2f}')




# calculate the percentage gain/loss of the user's portfolio
percentage_gain_loss = (total_gain_loss / total_value_one_year_ago) * 100
print(f'The annualized percentage gain/loss of the user\'s portfolio is: {percentage_gain_loss:.2f}%')

# calculate value of portfolio 5 years ago
# Define a function to get the price of a stock 5 years ago
def get_price_five_years_ago(symbol):
    # Define the start and end dates for the query
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - timedelta(days=365*5)).strftime('%Y-%m-%d')
    
    # Query YahooFinance for the stock price data
    stock_data = yf.download(symbol, start=start_date, end=end_date)
    
    # Return the closing price from 5 years ago
    return stock_data.iloc[0]['Close']

# Calculate the total value of the user's portfolio 5 years ago
total_value_five_years_ago = 0
for stock in portfolio:
    symbol = stock['symbol']
    shares = stock['shares']
    price_five_years_ago = get_price_five_years_ago(symbol)
    value_five_years_ago = shares * price_five_years_ago
    total_value_five_years_ago += value_five_years_ago  

# Print the total value of the user's portfolio 5 years ago
print(f'The total value of the user\'s portfolio 5 years ago was: ${total_value_five_years_ago:.2f}')
print(f'The total value of the user\'s current portfolio is: ${total_current_value:.2f}')

#############


# calculate the percentage gain/loss of the user's portfolio over 5 years
percentage_gain_loss_five_years = (total_current_value - total_value_five_years_ago) / total_value_five_years_ago * 100
print(f'The percentage gain/loss of the user\'s portfolio over 5 years is: {percentage_gain_loss_five_years:.2f}%')

# calculate the annualized rate of return of the user's portfolio over 5 years
annualized_return_five_years = (((total_current_value / total_value_five_years_ago) ** (1/5)) - 1)*100
print(f'The annualized rate of return of the user\'s portfolio over 5 years is: {annualized_return_five_years:.2f}%')

# calculate value of portfolio 10 years ago# Define the number of years ago
# Define a function to get the price of a stock 1 year ago
def get_price_ten_years_ago(symbol):
    # Define the start and end dates for the query
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - timedelta(days=365*10)).strftime('%Y-%m-%d')
    
    # Query YahooFinance for the stock price data
    stock_data = yf.download(symbol, start=start_date, end=end_date)
    
    # Return the closing price from 10 years ago
    return stock_data.iloc[0]['Close']

# Calculate the total value of the user's portfolio 5 years ago
total_value_ten_years_ago = 0
for stock in portfolio:
    symbol = stock['symbol']
    shares = stock['shares']
    price_ten_years_ago = get_price_ten_years_ago(symbol)
    value_ten_years_ago = shares * price_ten_years_ago
    total_value_ten_years_ago += value_ten_years_ago  

# Print the total value of the user's portfolio 10 years ago
print(f'The total value of the user\'s portfolio 10 years ago was: ${total_value_ten_years_ago:.2f}')
print(f'The total value of the user\'s current portfolio is: ${total_current_value:.2f}')

#############


# calculate the percentage gain/loss of the user's portfolio over 10 years
percentage_gain_loss_ten_years = (total_current_value - total_value_ten_years_ago) / total_value_ten_years_ago * 100
print(f'The percentage gain/loss of the user\'s portfolio over 10 years is: {percentage_gain_loss_ten_years:.2f}%')

# calculate the annualized rate of return of the user's portfolio over 10 years
annualized_return_ten_years = (((total_current_value / total_value_ten_years_ago) ** (1/10)) - 1)*100
print(f'The annualized rate of return of the user\'s portfolio over 10 years is: {annualized_return_ten_years:.2f}%')

# calculate returns over a 20 year period

# calculate value of portfolio 20 years ago# Define the number of years ago
# Define a function to get the price of a stock 20 years ago
def get_price_twenty_years_ago(symbol):
    # Define the start and end dates for the query
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - timedelta(days=365*20)).strftime('%Y-%m-%d')
    
    # Query YahooFinance for the stock price data
    stock_data = yf.download(symbol, start=start_date, end=end_date)
    
    # Return the closing price from 20 years ago
    return stock_data.iloc[0]['Close']

# Calculate the total value of the user's portfolio 20 years ago
total_value_twenty_years_ago = 0
for stock in portfolio:
    symbol = stock['symbol']
    shares = stock['shares']
    price_twenty_years_ago = get_price_twenty_years_ago(symbol)
    value_twenty_years_ago = shares * price_twenty_years_ago
    total_value_twenty_years_ago += value_twenty_years_ago  

# Print the total value of the user's portfolio 20 years ago
print(f'The total value of the user\'s portfolio 20 years ago was: ${total_value_twenty_years_ago:.2f}')
print(f'The total value of the user\'s current portfolio is: ${total_current_value:.2f}')

# calculate the percentage gain/loss of the user's portfolio over 20 years
percentage_gain_loss_twenty_years = (total_current_value - total_value_twenty_years_ago) / total_value_twenty_years_ago * 100
print(f'The percentage gain/loss of the user\'s portfolio over 20 years is: {percentage_gain_loss_twenty_years:.2f}%')

# calculate the annualized rate of return of the user's portfolio over 20 years
annualized_return_twenty_years = (((total_current_value / total_value_twenty_years_ago) ** (1/20)) - 1)*100
print(f'The annualized rate of return of the user\'s portfolio over 20 years is: {annualized_return_twenty_years:.2f}%')

# make the chart above in seaborn style, add data labels, grids# import necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np# create a list of annualized returns for 1 year, 5 years, 10 and 20 years
annualized_returns = [percentage_gain_loss, annualized_return_five_years, annualized_return_ten_years, annualized_return_twenty_years]
# create a list of labels for the x-axis
labels = ['1 Year', '5 Years', '10 Years', '20 Years']# create a bar chart
plt.figure(figsize=(15,5))
plt.bar(labels, annualized_returns)# add a title to the chart
# add data labels to the chart

for i, v in enumerate(annualized_returns):
    plt.text(i, v, str(round(v,2)), ha='center', va='bottom')
# add grids to the chart
#plt.grid(True)
# set the style to seaborn
sns.set_style("darkgrid")
# add a title to the chart

plt.title('Annualized % Returns for Different Time Periods')
plt.show()

# make the chart bigger

# create a summary of 1 year, 5 year, 10 year, 20 year returns

print('Summary of investment returns')
print('------------------------------\n')
print(f'The annualized rate of return of the user\'s portfolio over 1 year is: {percentage_gain_loss:.2f}%')
print(f'The annualized rate of return of the user\'s portfolio over 5 years is: {annualized_return_five_years:.2f}%')
print(f'The annualized rate of return of the user\'s portfolio over 10 years is: {annualized_return_ten_years:.2f}%')
print(f'The annualized rate of return of the user\'s portfolio over 20 years is: {annualized_return_twenty_years:.2f}%')

# here we calculate how $10000 invested over 1, 5, 10 & 20 years would have grown

amount_invested = 10000
total_return_one_year = (1 + percentage_gain_loss/100) * amount_invested
total_return_five_years = (1 + (annualized_return_five_years/100))**5 * amount_invested

total_return_ten_years = (1 + (annualized_return_ten_years/100))**10 * amount_invested
total_return_twenty_years = (1 + (annualized_return_twenty_years/100))**20 * amount_invested

print(f'$10000 invested 1 year ago is now ${total_return_one_year:.2f}')
print(f'$10000 invested 5 years ago is now ${total_return_five_years:.2f}')
print(f'$10000 invested 10 years ago is now ${total_return_ten_years:.2f}')
print(f'$10000 invested 20 years ago is now ${total_return_twenty_years:.2f}')

# create bar chart with labels of total return amounts
import matplotlib.pyplot as plt
#To create a bar chart with labels of total return amounts, we need to define the x and y values for the bars and then use the `bar` function from matplotlib to create the chart. We also need to add labels to the x-axis and y-axis using the `xlabel` and `ylabel` functions, and a title using the `title` function. 
# Finally, we use the ``
x_values = ['1 year', '5 years', '10 years', '20 years']
y_values = [total_return_one_year, total_return_five_years, total_return_ten_years, total_return_twenty_years]
plt.figure(figsize=(15,5))
plt.bar(x_values, y_values)
for i, v in enumerate(y_values):
    plt.text(i, v, str(round(v,2)), ha='center', va='bottom')
plt.xlabel('Investment Duration')
plt.ylabel('Total Return Amount (in $)')
plt.title('Total Return on $10000 Investment')
plt.show()
